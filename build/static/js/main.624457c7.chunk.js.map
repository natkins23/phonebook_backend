{"version":3,"sources":["services/persons.js","components/Persons.js","components/Filter.js","components/PersonForm.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","Persons","persons","removePerson","map","person","name","number","onClick","id","Filter","filter","filterChange","value","onChange","PersonForm","nameChange","numberChange","addPerson","type","Notification","notification","className","message","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","setNotification","trim","notifyWith","setTimeout","useEffect","axios","get","then","res","data","personsResponse","peopleToShow","length","includes","event","target","preventDefault","newObject","existingPerson","find","window","confirm","put","addedPerson","catch","error","response","post","personService","concat","personToDelete","delete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.624457c7.chunk.js","sourcesContent":["import axios from 'axios'\r\n//updated with 3.11 - relative url\r\nconst baseUrl = '/api/persons'\r\n\r\n//3.10 - baseurl could be changed\r\n//const baseUrl = 'https://calm-bastion-54373.herokuapp.com/api/persons'\r\n//pre 3.10 baseURL\r\n//const baseUrl = 'http://localhost:3001/api/persons'\r\n\r\n//1 Named Export alternate\r\nexport const getAll = () => axios.get(baseUrl).then(res=>res.data)\r\n\r\nexport const create = (newObject) => axios.post(baseUrl, newObject).then(res=>res.data)\r\n\r\nexport const update = (id, newObject) =>\r\n  axios.put(`${baseUrl}/${id}`, newObject).then(res=>res.data)\r\n\r\nexport const deletePersron = id =>\r\naxios.delete(`${baseUrl}/${id}`).then(res=>res.data)\r\n\r\n//put in app.js\r\n//import * as notService from './services.persons'\r\n\r\n\r\n\r\n//2) use export default:\r\n// const getAll = () => axios.get(baseUrl).then(res=>res.data)\r\n\r\n// const create = (newObject) => axios.post(baseUrl, newObject).then(res=>res.data)\r\n\r\n// const update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject).then(res=>res.data)\r\n\r\n// const noteService = {\r\n//   getAll,\r\n//   create,\r\n//   update,\r\n// }\r\n\r\n// export default noteService\r\n\r\n//2.16 Lesson: there are two ways to step modules to export.\r\n//1)Default Export\r\n//2) named export\r\n\r\n//https://newbedev.com/export-const-vs-export-default-in-es6\r\n","const Persons = ({ persons, removePerson }) => {\r\n\r\n  return (\r\n    persons.map(person=>\r\n      <p key={person.id}>\r\n        {person.name} {person.number} \r\n        <button onClick={() => removePerson(person.id)}>delete</button>\r\n      </p>\r\n    )\r\n  )\r\n}\r\n\r\nexport default Persons\r\n","const Filter = ({ filter, filterChange }) => {\r\n    return (\r\n      <>\r\n        <div>\r\n          filter shown with\r\n          <input value={filter} onChange={filterChange} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n  export default Filter","  const PersonForm = ({ name, nameChange, number, numberChange, addPerson }) => {\r\n    return (\r\n      <>\r\n        <form>\r\n          <div>\r\n            <div>\r\n              name: <input value={name} onChange={nameChange} />\r\n            </div>\r\n            <div>\r\n              number: <input value={number} onChange={numberChange} />\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <button onClick={addPerson} type='submit'>\r\n              add\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </>\r\n    )\r\n  }\r\n  export default PersonForm","const Notification = ({notification}) => {\r\n    if (notification === null) {\r\n        return null\r\n      }\r\n\r\n      return (\r\n        <div className={notification.type}>\r\n          {notification.message}\r\n        </div>\r\n      )\r\n  }\r\n  export default Notification","import React, { useState, useEffect } from 'react'\r\nimport * as personService from './services/persons'\r\nimport Persons from './components/Persons'\r\nimport Filter from './components/Filter'\r\nimport PersonForm from './components/PersonForm'\r\nimport Notification from './components/Notification'\r\n\r\n//need to change addPerson so when i create a new Object that its not based off the lenght of the personObject, this is obsolete\r\n//also need to figure out why multiple persons are being deleted, it could be that they share the same id?\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [newFilter, setNewFilter] = useState('')\r\n  const [notification,setNotification] = useState(null)\r\n\r\n//destructured assignment - update to deal with trimming\r\nconst {name, number} = {name:newName.trim(), number:newNumber.trim()}\r\n  //2.19\r\nconst notifyWith = (message, type='success') => {\r\n    setNotification({message,type})\r\n    setTimeout(() => {\r\n      setNotification(null)\r\n    }, 5000)\r\n  }\r\n\r\n//updated with 3.9\r\n  const hook = () => {\r\n    personService.getAll().then(personsResponse =>{\r\n      setPersons(personsResponse)\r\n  })\r\n}\r\n  useEffect(hook, [])\r\n\r\n  const peopleToShow =\r\n    newFilter.length > 0\r\n      ? persons.filter((person) => person.name.includes(newFilter))\r\n      : persons\r\n\r\n  //2.18 changes-updating existing person with new add\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n\r\n    //returns first element or undefined\r\n    const existingPerson = persons.find(person => name === person.name)\r\n    \r\n    //updated with 2.18 - update existing contact\r\n    if (existingPerson) {\r\n      const result = window.confirm(`${ name } is already added to the phonebook, replace the old number with a new one?`)\r\n      if (result){\r\n        personService.update(existingPerson.id,{\r\n          name: existingPerson.name,\r\n          number: number   \r\n        }).then(addedPerson => {\r\n          setPersons(persons.map(person=>person.id !==existingPerson.id? person : addedPerson))\r\n          notifyWith(`Changed number of  ${existingPerson.name}`)\r\n          setNewName('')\r\n          setNewNumber('')\r\n          }).catch(error => {\r\n            // 3.20 - display mongoose error\r\n            notifyWith(`${error.response.data.error} `, 'error')\r\n          })\r\n      }\r\n      } else{\r\n        personService.create({\r\n          name: name,\r\n          number: number   \r\n        }).then(addedPerson => {\r\n          setPersons(persons.concat(addedPerson))\r\n          notifyWith(`Added  ${name}`)\r\n          setNewName('')\r\n          setNewNumber('')\r\n          }).catch(error => {\r\n            // 3.20 - display mongoose error\r\n            notifyWith(`${error.response.data.error} `, 'error')\r\n          })\r\n    }\r\n\r\n  }//end addPerson\r\n\r\n  const removePerson = (id) =>{\r\n    const personToDelete = persons.find(person => person.id = id)\r\n \r\n    const result = window.confirm(`Are you sure you want to delete ${personToDelete.name}`)\r\n    if(result){\r\n    personService.deletePersron(id).then(response =>{\r\n      setPersons(persons.filter(person =>person.id!==id))\r\n      notifyWith(`Removed ${personToDelete.name}`)\r\n      //2.20\r\n    }).catch(error=>{\r\n      //refresh the list of numbers\r\n      setPersons(persons.filter(person =>person.id!==id))\r\n      notifyWith(`${personToDelete.name} had already been removed`, 'error')})\r\n  }\r\n}\r\n  \r\n  const handleNameInputChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n  \r\n  const handleNumberInputChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n  const handleFilterChange = (event) => {\r\n    setNewFilter(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>3.20: MongoDB with mongoose</p>\r\n      <h2> Phonebook </h2>\r\n      <Notification notification = {notification}/>\r\n      <Filter filter={newFilter} filterChange={handleFilterChange} />\r\n\r\n      <h2> add a new </h2> \r\n      <PersonForm\r\n        name={newName}\r\n        nameChange={handleNameInputChange}\r\n        number={newNumber}\r\n        numberChange={handleNumberInputChange}\r\n        addPerson={addPerson}\r\n      />\r\n      <h2> Numbers </h2> \r\n      <Persons \r\n        persons={peopleToShow}  \r\n        removePerson = {removePerson}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n\r\n\r\n/* 2.17 precursor\r\n-moved components into components folder\r\n--note: you should probably not be exporting multiple components from a single component file, just bad form\r\n-refactored to remove unnecessary header and person component\r\n2.17 delete btn\r\n\r\n\r\n\r\n2.11 - fetching data using axios\r\n1)setup the db.json with the json data\r\n2) install axios and db server and run the server\r\n3) import axios\r\n4) create a use effect\r\n5) create a hook\r\n5) create an event handler\r\n\r\n2.11\r\n  1)make a hook\r\n  ---a) hook has an eventHandler. this eventhandler takes a response and uses the response to update the persons array state\r\n  ---b) use axios to get the data from the json server, this returns a promise. \r\n  ---c) we use the eventHandler as a callback function for what we do to the promise(which is getting data from the server), which is used to update the person array \r\n  2) use useEffect to call the hook as the first parameter, and an empty array as the second parameter so the effect goes off only when the component refreshes. \r\n\r\n\r\n  useEffect(() => {\r\n    console.log('effect')\r\n    const eventHandler = (response) => {\r\n      console.log('fullfilled')\r\n      setPersons(response.data)\r\n    }\r\n\r\n    const promise = axios.get('http://localhost:3001/persons')\r\n    promise.then(eventHandler)\r\n  }, [])\r\n\r\n\r\n2.10 extracting components from application (copy and paste essentailly with prop renaming)\r\n\r\n2.7-2.9 filter was the hardest part\r\n\r\n\r\n2.6 what do i need to do?\r\n1)display the name of the persons objects under numbers\r\n2)be able to add to the persons array from input of the form\r\n\r\n*/\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}